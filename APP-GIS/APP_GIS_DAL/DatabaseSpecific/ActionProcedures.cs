//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace App.CongAnGis.Dal.DatabaseSpecific
{
	/// <summary>Class which contains the static logic to execute action stored procedures in the database.</summary>
	public static partial class ActionProcedures
	{
		/// <summary>Delegate definition for stored procedure 'count_data' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int CountDataCallBack(System.String tableName, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'count_records' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int CountRecordsCallBack(System.String iSql, IDataAccessCore dataAccessProvider);

		/// <summary>Calls stored procedure 'count_data'.<br/><br/></summary>
		/// <param name="tableName">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int CountData(System.String tableName)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return CountData(tableName, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'count_data'.<br/><br/></summary>
		/// <param name="tableName">Input parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int CountData(System.String tableName, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateCountDataCall(dataAccessProvider, tableName))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'count_data'. Async variant<br/><br/></summary>
		/// <param name="tableName">Input parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static async Task<int> CountDataAsync(System.String tableName, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await CountDataAsync(tableName, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'count_data'. Async variant<br/><br/></summary>
		/// <param name="tableName">Input parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static async Task<int> CountDataAsync(System.String tableName, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateCountDataCall(dataAccessProvider, tableName))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				return _procReturnValue;
			}
		}

		/// <summary>Calls stored procedure 'count_records'.<br/><br/></summary>
		/// <param name="iSql">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int CountRecords(System.String iSql)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return CountRecords(iSql, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'count_records'.<br/><br/></summary>
		/// <param name="iSql">Input parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int CountRecords(System.String iSql, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateCountRecordsCall(dataAccessProvider, iSql))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'count_records'. Async variant<br/><br/></summary>
		/// <param name="iSql">Input parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static async Task<int> CountRecordsAsync(System.String iSql, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await CountRecordsAsync(iSql, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'count_records'. Async variant<br/><br/></summary>
		/// <param name="iSql">Input parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static async Task<int> CountRecordsAsync(System.String iSql, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateCountRecordsCall(dataAccessProvider, iSql))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				return _procReturnValue;
			}
		}

		/// <summary>Creates the call object for the call 'CountData' to stored procedure 'count_data'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="tableName">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateCountDataCall(IDataAccessCore dataAccessProvider, System.String tableName)
		{
			return new StoredProcedureCall(dataAccessProvider, "\"OpendataBG\".\"appcongangis\".\"count_data\"", "CountData")
							.AddParameter("table_name", "Text", 1073741824, ParameterDirection.Input, true, 0, 0, tableName);
		}

		/// <summary>Creates the call object for the call 'CountRecords' to stored procedure 'count_records'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="iSql">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateCountRecordsCall(IDataAccessCore dataAccessProvider, System.String iSql)
		{
			return new StoredProcedureCall(dataAccessProvider, "\"OpendataBG\".\"appcongangis\".\"count_records\"", "CountRecords")
							.AddParameter("i_sql", "Text", 1073741824, ParameterDirection.Input, true, 0, 0, iSql);
		}


	}
}
