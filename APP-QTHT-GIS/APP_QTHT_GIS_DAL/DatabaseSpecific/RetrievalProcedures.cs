//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using SD.LLBLGen.Pro.ORMSupportClasses;
using SD.LLBLGen.Pro.QuerySpec.Adapter;

namespace App.QTHTGis.Dal.DatabaseSpecific
{
	/// <summary>Class which contains the static logic to execute retrieval stored procedures in the database.</summary>
	public static partial class RetrievalProcedures
	{
		/// <summary>Gets the SP Call using query for fetching the GetMenuByUserFuncResult TypedView.</summary>
		/// <param name="pUserName">Input parameter of stored procedure</param>
		/// <param name="pAppid">Input parameter of stored procedure</param>
		/// <returns>ready to use IRetrievalQuery instance for fetching the typedview</returns>
		/// <remarks>Output parameters are not set after query is executed</remarks>
		public static IRetrievalQuery GetQueryForGetMenuByUserFuncResultTypedView(System.String pUserName, System.Int32 pAppid)
		{
			IRetrievalQuery query = GetGetMenuByUserFuncCallAsQuery(pUserName, pAppid);
			query.ResultsetNumber = 1;
			return query;
		}

		/// <summary>Fetches instances of the the typed view row 'GetMenuByUserFuncResultRow' class using a stored procedure call. </summary>
		/// <typeparam name="T">The type of the typed view row</typeparam>
		/// <param name="projectionOfTypedView">The projection of the typed view, created using the method QueryFactory.GetGetMenuByUserFuncResultTypedViewProjection().</param>
		/// <param name="pUserName">Input parameter of stored procedure</param>
		/// <param name="pAppid">Input parameter of stored procedure</param>
		/// <returns>The results in a List</returns>
		public static List<T> FetchGetMenuByUserFuncResultTypedView<T>(SD.LLBLGen.Pro.QuerySpec.DynamicQuery<T> projectionOfTypedView, System.String pUserName, System.Int32 pAppid)
		{
			using(var adapter = new DataAccessAdapter())
			{
				return FetchGetMenuByUserFuncResultTypedView(adapter, projectionOfTypedView, pUserName, pAppid);
			}
		}

		/// <summary>Fetches instances of the the typed view row 'GetMenuByUserFuncResultRow' class using a stored procedure call. </summary>
		/// <typeparam name="T">The type of the typed view row</typeparam>
		/// <param name="adapter">The adapter.</param>
		/// <param name="projectionOfTypedView">The projection of the typed view, created using the method QueryFactory.GetGetMenuByUserFuncResultTypedViewProjection().</param>
		/// <param name="pUserName">Input parameter of stored procedure</param>
		/// <param name="pAppid">Input parameter of stored procedure</param>
		/// <returns>The results in a List</returns>
		public static List<T> FetchGetMenuByUserFuncResultTypedView<T>(IDataAccessAdapter adapter, SD.LLBLGen.Pro.QuerySpec.DynamicQuery<T> projectionOfTypedView, System.String pUserName, System.Int32 pAppid)
		{
			StoredProcedureCall call = CreateGetMenuByUserFuncCall(adapter, pUserName, pAppid);
			IRetrievalQuery query = call.ToRetrievalQuery();
			query.ResultsetNumber = 1;
			var toReturn = adapter.FetchQueryFromSource(projectionOfTypedView, query);
			return toReturn;
		}
		
		/// <summary>Fetches instances of the the typed view row 'GetMenuByUserFuncResultRow' class using a stored procedure call. Async variant</summary>
		/// <typeparam name="T">The type of the typed view row</typeparam>
		/// <param name="projectionOfTypedView">The projection of the typed view, created using the method QueryFactory.GetGetMenuByUserFuncResultTypedViewProjection().</param>
		/// <param name="pUserName">Input parameter of stored procedure</param>
		/// <param name="pAppid">Input parameter of stored procedure</param>
		/// <param name="cancellationToken">The cancellation token to use</param>
		/// <returns>The results in a list.</returns>
		public static async Task<List<T>> FetchGetMenuByUserFuncResultTypedViewAsync<T>(SD.LLBLGen.Pro.QuerySpec.DynamicQuery<T> projectionOfTypedView, System.String pUserName, System.Int32 pAppid, CancellationToken cancellationToken)
		{
			using(var adapter = new DataAccessAdapter())
			{
				var toReturn = await FetchGetMenuByUserFuncResultTypedViewAsync(adapter, projectionOfTypedView, pUserName, pAppid, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Fetches instances of the the typed view row 'GetMenuByUserFuncResultRow' class using a stored procedure call. Async variant </summary>
		/// <typeparam name="T">The type of the typed view row</typeparam>
		/// <param name="adapter">The adapter.</param>
		/// <param name="projectionOfTypedView">The projection of the typed view, created using the method QueryFactory.GetGetMenuByUserFuncResultTypedViewProjection().</param>
		/// <param name="pUserName">Input parameter of stored procedure</param>
		/// <param name="pAppid">Input parameter of stored procedure</param>
		/// <param name="cancellationToken">The cancellation token to use</param>
		/// <returns>The results in a list.</returns>
		public static async Task<List<T>> FetchGetMenuByUserFuncResultTypedViewAsync<T>(IDataAccessAdapter adapter, SD.LLBLGen.Pro.QuerySpec.DynamicQuery<T> projectionOfTypedView, System.String pUserName, System.Int32 pAppid, CancellationToken cancellationToken)
		{
			var call = CreateGetMenuByUserFuncCall(adapter, pUserName, pAppid);
			var query = call.ToRetrievalQuery();
			query.ResultsetNumber = 1;
			var typedView = await adapter.FetchQueryFromSourceAsync(projectionOfTypedView, query, cancellationToken).ConfigureAwait(false);
			return typedView;
		}


		/// <summary>Calls stored procedure 'get_menu_by_user_func'.<br/><br/></summary>
		/// <param name="pUserName">Input parameter. </param>
		/// <param name="pAppid">Input parameter. </param>
		/// <returns>Filled DataTable with resultset(s) of stored procedure</returns>
		public static DataTable GetMenuByUserFunc(System.String pUserName, System.Int32 pAppid)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return GetMenuByUserFunc(pUserName, pAppid, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'get_menu_by_user_func'.<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="pUserName">Input parameter. </param>
		/// <param name="pAppid">Input parameter. </param>
		/// <returns>Filled DataTable with resultset(s) of stored procedure</returns>
		public static DataTable GetMenuByUserFunc(System.String pUserName, System.Int32 pAppid, IDataAccessCore dataAccessProvider)
		{
			using(StoredProcedureCall call = CreateGetMenuByUserFuncCall(dataAccessProvider, pUserName, pAppid))
			{
				DataTable toReturn = call.FillDataTable();
				return toReturn;
			}
		}

		/// <summary>Creates an IRetrievalQuery object for a call to the procedure 'get_menu_by_user_func'.</summary>
		/// <param name="pUserName">Input parameter of stored procedure</param>
		/// <param name="pAppid">Input parameter of stored procedure</param>
		/// <returns>IRetrievalQuery object which is ready to use for datafetching</returns>
		public static IRetrievalQuery GetGetMenuByUserFuncCallAsQuery(System.String pUserName, System.Int32 pAppid)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return GetGetMenuByUserFuncCallAsQuery(pUserName, pAppid, dataAccessProvider);
			}
		}

		/// <summary>Creates an IRetrievalQuery object for a call to the procedure 'get_menu_by_user_func'.</summary>
		/// <param name="pUserName">Input parameter of stored procedure</param>
		/// <param name="pAppid">Input parameter of stored procedure</param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>IRetrievalQuery object which is ready to use for datafetching</returns>
		public static IRetrievalQuery GetGetMenuByUserFuncCallAsQuery(System.String pUserName, System.Int32 pAppid, IDataAccessCore dataAccessProvider)
		{
			return CreateGetMenuByUserFuncCall(dataAccessProvider, pUserName, pAppid).ToRetrievalQuery();
		}

		/// <summary>Creates the call object for the call 'GetMenuByUserFunc' to stored procedure 'get_menu_by_user_func'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="pUserName">Input parameter</param>
		/// <param name="pAppid">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateGetMenuByUserFuncCall(IDataAccessCore dataAccessProvider, System.String pUserName, System.Int32 pAppid)
		{
			return new StoredProcedureCall(dataAccessProvider, "\"OpendataBG\".\"appqthtgis\".\"get_menu_by_user_func\"", "GetMenuByUserFunc")
							.AddParameter("p_user_name", "Varchar", 10485760, ParameterDirection.Input, true, 0, 0, pUserName)
							.AddParameter("p_appid", "Integer", 0, ParameterDirection.Input, true, 0, 0, pAppid);
		}


	}
}
